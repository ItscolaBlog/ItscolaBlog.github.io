<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>玩MC CPS太低?，写个检测不到的AutoClick 自动点怎么样？</title>
      <link href="/posts/60546.html"/>
      <url>/posts/60546.html</url>
      
        <content type="html"><![CDATA[<h1 id="玩MC-CPS太低-，写个检测不到的AutoClick-自动点怎么样？"><a href="#玩MC-CPS太低-，写个检测不到的AutoClick-自动点怎么样？" class="headerlink" title="玩MC CPS太低?，写个检测不到的AutoClick 自动点怎么样？"></a>玩MC CPS太低?，写个检测不到的AutoClick 自动点怎么样？</h1><p><strong>声明：在使用本方法前，请确定服务器是否允许自动点击的操作。<br>这里会尽量模拟人的点击操作以避开反作弊检测。</strong>   </p><p>如果你想做成软件的形式，而不是 mc mod，这里也提供一个绕过反作弊检测的思路。</p><h2 id="1-制作前"><a href="#1-制作前" class="headerlink" title="1.制作前"></a>1.制作前</h2><h3 id="1-1-环境"><a href="#1-1-环境" class="headerlink" title="1.1 环境"></a>1.1 环境</h3><p>本方法适用于 Forge mod 或者 MCP，Forge mod 需要配合 Mixin 框架进行字节码修改。<br>Fabric 也是同理，只不过反混淆名不一样 需要自己找。<br>这里使用 1.8.9 Forge mdk 进行演示。<br>至于如何搭建 Forge 1.8.9 MDK 配合 Mixin 的环境，请自行读 Forge 或 Mixin 的文档，在这里不做过多讲解。</p><h3 id="1-2-原理"><a href="#1-2-原理" class="headerlink" title="1.2 原理"></a>1.2 原理</h3><p>如果自动点击 CPS 太单一，那么多半会被反作弊检测到。通常我们需要设立 CPS 区间，比如 7-10 CPS。但这还不够，一些智能的 反作弊 依然能够通过某些方式检测到。这里我将使用被我称之为 “随机抖动延迟法” 的方法。</p><p>随机抖动延迟法 来源于观察普通玩家的 CPS 而得到，如果你加一个显示 CPS 的 mod。会发现你的 CPS 并不会在 7-10 之间随机变动，而是有种从 9 10 之间反复变动，或者有时候又会在 8 9 之间反复变动。 我称这种行为为 “随机抖动”。 至于延迟，这涉及到 CPS 控制实现的本质，CPS 为每秒点击率 如果你不设定这一秒和下一秒的延迟，那么 CPS 就会到一个很大很大的数字，这当然不是我们想要的。所以我们在点击这一次到下一次之间，需要一定的延迟。</p><h2 id="2-编写代码"><a href="#2-编写代码" class="headerlink" title="2. 编写代码"></a>2. 编写代码</h2><h3 id="2-1-settings"><a href="#2-1-settings" class="headerlink" title="2.1 settings"></a>2.1 settings</h3><p>我们首先需要定义一些字段，用于控制其中涉及到的一些参数。<br>由于我这里的程序会通过反射自动在 GUI 生成对应字段的 ui 交互。所以这里会有 @ModuleSettin 注解，不用在意这个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最小 CPS</span></span><br><span class="line"><span class="meta">@ModuleSetting(name = &quot;MinCPS&quot;,addValue = 1f)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">Float</span> <span class="variable">minCPS</span> <span class="operator">=</span> <span class="number">10f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大 CPS</span></span><br><span class="line"><span class="meta">@ModuleSetting(name = &quot;MaxCPS&quot;,addValue = 1f)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">Float</span> <span class="variable">maxCPS</span> <span class="operator">=</span> <span class="number">11f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最大抖动延迟</span></span><br><span class="line"><span class="meta">@ModuleSetting(name = &quot;random&quot;,addValue = 1f)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">Float</span> <span class="variable">random</span> <span class="operator">=</span> <span class="number">25f</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-一些条件"><a href="#2-2-一些条件" class="headerlink" title="2.2 一些条件"></a>2.2 一些条件</h3><p>因为我们需要使用者按下鼠标才开始自动点击，对应的就是按下攻击键。<br>因此首先我们要判断使用者有没有按下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里的 mc 为 Minecraft.getMinecraft() 的引用。</span></span><br><span class="line"><span class="keyword">if</span>(!mc.gameSettings.keyBindAttack.isKeyDown())&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们需要一定的延迟，所以我们需要记下来上一次点击是声明时候。<br>这里我们定义一个全局变量 leftLastSwing，在点击后记录时间戳。<br>以及定义另一个全局变量 delay ，用于距离上一次点击需要的延迟。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">long</span> leftLastSwing;</span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> delay;</span><br></pre></td></tr></table></figure><p>第一次点击时 leftLastSwing 一定为 0，我们的第一次点击不需要延迟。之后我们每次点击都需要设定距离下一次点击的延迟给 delay。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果 现在的时间戳 - 上一次点击的时间戳 &gt;= 上一次设定的延迟，那么进入 if 语句。</span></span><br><span class="line"><span class="keyword">if</span>(System.currentTimeMillis() - <span class="built_in">this</span>.leftLastSwing &gt;= delay)&#123;</span><br><span class="line">    <span class="comment">//设定下一次点击的延迟，在 minCPS maxCPS 之间随机 CPS 获得延迟。</span></span><br><span class="line">    delay = (<span class="type">int</span>) RandomUtils.nextDouble(<span class="number">1000f</span>/minCPS,<span class="number">1000f</span>/maxCPS);</span><br><span class="line">    <span class="comment">// 给 delay 减去抖动延迟，最小为1 最大为 random 值，进一步随机。</span></span><br><span class="line">    delay = delay - (<span class="type">int</span>) RandomUtils.nextDouble(<span class="number">1</span>,random);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//todo: 点击一次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RandomUtils:     </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">SecureRandom</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecureRandom</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">nextDouble</span><span class="params">(<span class="type">double</span> min,<span class="type">double</span> max)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  max + (min - max) * random.nextDouble();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很好，接下来我们来实现这个 “todo: 点击一次”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">sendLeftClick</span><span class="params">(<span class="type">boolean</span> state)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">keycode</span> <span class="operator">=</span> mc.gameSettings.keyBindAttack.getKeyCode();</span><br><span class="line"><span class="comment">//        System.out.println(keycode);</span></span><br><span class="line">    <span class="keyword">if</span> (state) &#123;</span><br><span class="line">        KeyBinding.onTick(keycode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浙样 我们上方的完整代码就是:    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果 现在的时间戳 - 上一次点击的时间戳 &gt;= 上一次设定的延迟，那么进入 if 语句。</span></span><br><span class="line"><span class="keyword">if</span>(System.currentTimeMillis() - <span class="built_in">this</span>.leftLastSwing &gt;= delay)&#123;</span><br><span class="line">    <span class="comment">//设定下一次点击的延迟，在 minCPS maxCPS 之间随机 CPS 获得延迟。</span></span><br><span class="line">    delay = (<span class="type">int</span>) RandomUtils.nextDouble(<span class="number">1000f</span>/minCPS,<span class="number">1000f</span>/maxCPS);</span><br><span class="line">    <span class="comment">// 给 delay 减去抖动延迟，最小为1 最大为 random 值，进一步随机。</span></span><br><span class="line">    delay = delay - (<span class="type">int</span>) RandomUtils.nextDouble(<span class="number">1</span>,random);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击一次</span></span><br><span class="line">    sendLeftClick(<span class="literal">true</span>);</span><br><span class="line">    sendLeftClick(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，你可能会想，我们为什么不直接实现点击呢，如果准心有玩家就点击，没有就只需要 SwingItem 就行了。确实这看上去是个好方法，这也避开了 1.8.9 的一个 bug 不用进行我们下一步的操作。但是这里注意有一个坑。每当你调用一次 <code>mc.thePlayer.swingItem();</code> 你的客户端就会发一个数据包到服务器。然而 Mojang 的代码并不是点一次发一个挥动物品数据包，因此你如果这样做，会被反作弊直接检测到。 因此我们要做的是模拟点击操作 接下来的让 mojang 去处理。</p><p>你可能觉着这样就结束了。<br>但还没结束，原版 1.8.9 实际上有一个 bug，这样会导致你的 cps 非常低。<br>如何解决这个 bug 呢？</p><p>你需要在 Minecraft 类的 clickMouse 方法里的最开头，将 this.leftClickCounter 设置为0。   这里用 Mixin 实现修改，如果是 MCP 直接改代码就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject(method = &quot;clickMouse&quot;, at = &#123; @At(&quot;HEAD&quot;) &#125;, cancellable = true)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">clickMouse</span><span class="params">(CallbackInfo ci)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.leftClickCounter = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的不被检测的连点 mod 就做好了。有的反作弊 CPS 只要超过 15，就认为你作弊了，因此你需要根据情况调我们的全局变量 即 调参数。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> java </tag>
            
            <tag> Minecraft Mod </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Minecraft Mod注入实现 (一) Attach Javaagent</title>
      <link href="/posts/35235.html"/>
      <url>/posts/35235.html</url>
      
        <content type="html"><![CDATA[<h1 id="Minecraft-Mod注入实现-一-Attach-JavaAgent"><a href="#Minecraft-Mod注入实现-一-Attach-JavaAgent" class="headerlink" title="Minecraft Mod注入实现 (一) Attach JavaAgent"></a>Minecraft Mod注入实现 (一) Attach JavaAgent</h1><p>声明：本人并不支持使用注入技术在任何 MC 服务器进行作弊。注入 mod 到客户端只是一种技术手段，它能实现更灵活的加载mod。本篇文章仅仅探讨技术与实现。</p><p>本期我们只讨论 Attach Javagent 注入，后面我们会逐步深入，了解更多实现注入的方法。</p><h2 id="1-原理："><a href="#1-原理：" class="headerlink" title="1. 原理："></a>1. 原理：</h2><h3 id="1-1-JavaAgent"><a href="#1-1-JavaAgent" class="headerlink" title="1.1 JavaAgent"></a>1.1 JavaAgent</h3><p>在探讨如何注入前，我们先探讨下原理。<br>Java 有种东西叫做 Javaagent，它被用于运行时动态修改字节码以实现 debug 热加载 等等。著名的来自阿里的调试工具 Arthas 就是利用了该技术，这个工具用与运行时对字节码进行调试修改，诊断。</p><p>那么如何写代码去用 Javaagent 这个技术呢？<br>通常情况下，我们需要先写一个 Javaagent 的 jar，然后在运行 java 项目时加上参数。</p><p>如何写一个javaagent，我们分为这几步：    </p><ol><li>创建 java项目。</li><li>创建一个类。</li><li>在类中编写 public static void agentmain(String args, Instrumentation instrumentation) 或 public static void premain(String agentArgs, Instrumentation inst) 方法。</li><li>在 Manifest 中编写 ‘Agent-Class’ 来指定 javaagent 注入点，例如 ‘Agent-Class’: ‘top.whitecola.promodulelite.AttachPoint’。</li><li>生成 jar 文件 (一定要包含 Manifest 才行，比如你可以用 gradle 实现)。</li></ol><p>我们调常用的 agentain 方法来说，我们可以通过 Instrumentation inst 参数来判断是不是所需要的类，如果时 那么可以通过该参数进行修改。     </p><p>怎么修改呢？我们需要生成一个新的类来替换对应类，生成类我们就可以用库了，这样更简单一些，比如 ASM  Javassist(更方便，不用接触字节码，但是有严格的开源协议。)。</p><h3 id="1-2-Attach-Javaagent"><a href="#1-2-Attach-Javaagent" class="headerlink" title="1.2 Attach Javaagent"></a>1.2 Attach Javaagent</h3><p>如果每次都加参数来加载 Javaagent 那岂不是太麻烦了，并且有的时候没办法加。实际上我们可以通过 com.sun.tools.attach 包下的类，来动态的运行时加载 javaagent。</p><p>attach 有附加的意思，因此你可以理解为为正在运行的 java 程序动态附加 Javaagent。</p><p>正因如此，我们需要编写两个项目来进行注入，一个注入器 也就是我们用来编写 attach 的，一个要被 attach 的 javaagent。</p><p>那么今天我们就来编写我们的 注入器 和我们作为javaagent 的 mod 来动态加载 mod，也就是我们常说的注入。这里只以注入 Forge 端进行演示。</p><h3 id="1-3-Classloader"><a href="#1-3-Classloader" class="headerlink" title="1.3 Classloader"></a>1.3 Classloader</h3><p>Classloader 类加载器 用来加载 Java 类，每一个类都有一个Classloader，它可以是 java 程序的Classloader 也可以是程序或我们自定义好的 Classloader。 </p><p>以下是题外话：<br>有了 Classloader 我们可以在加载一个类时对类进行字节码修改。 如 Springboot 之类的很多框架 也是用了自定义的Classloader （这就是有些人为什么把 SpringBoot 整合到 Bukkit 中不能自动注入了，因为不是用的 SpringBoot 的 Classloader，而是 Bukkit 的Classloader。）</p><p>我的 SiestaFramework 框架的 @Inject 功能也用到了自定义 Classloader 以加载 components 实现 AOP.<br> <a href="https://github.com/itscola/Siesta-framework">https://github.com/itscola/Siesta-framework</a></p><p> Classloader通常是你能拿到程序的主类，才能自定义自己的 Classloader。<br> 如果你想拿到 Bukkit 的 Classloader 你可以自己写一个主类来调用 Bukkit 的主类，来实现使用自己的 Classloader。这也是在 Bukkit 用 Mixin 注入框架的基本原理。（官方服务端原理也一样。）</p><h2 id="2-实现："><a href="#2-实现：" class="headerlink" title="2. 实现："></a>2. 实现：</h2><h3 id="2-1-MCInjector"><a href="#2-1-MCInjector" class="headerlink" title="2.1 MCInjector"></a>2.1 MCInjector</h3><p>首先我们先来编写我们的注入器，即 attach 工具。<br>先把写好的项目放在这里： <a href="https://github.com/itscola/MCInjector">https://github.com/itscola/MCInjector</a> ，如果你想直接拿来用也可以，只不过别忘了 star 一下此项目以表支持。</p><p>我们创建一个主类叫做 MCInjector ，并在其中加入我们的 main 方法。   </p><p>废话不多说直接上代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.whitecola.mcinjector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachine;</span><br><span class="line"><span class="keyword">import</span> com.sun.tools.attach.VirtualMachineDescriptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MCInjector</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        <span class="comment">//获取 mod 文件，也就是作为 javaagent 的 mod 文件，</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./client.jar&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!client.exists())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到 Client.jar!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取 java虚拟机的进程并找到以 net.minecraft.launchwrapper.Launch 作为主类的程序。（一般是 Forge MCP 的主类，Fabric 的主类并不一样，可以自己遍历list查看。）</span></span><br><span class="line">        <span class="type">VirtualMachineDescriptor</span> <span class="variable">vm</span> <span class="operator">=</span> VirtualMachine.list().stream().filter(m -&gt; m.displayName().startsWith(<span class="string">&quot;net.minecraft.launchwrapper.Launch&quot;</span>)).findFirst().orElse(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果没有找到 net.minecraft.launchwrapper.Launch 开头作为主类的程序，那么输出并return。</span></span><br><span class="line">        <span class="keyword">if</span>(vm==<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有找到 Minecraft 进程!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对该程序进行 attach 并加载我们已经写好的 javaagent 文件。最后提示完成注入。</span></span><br><span class="line">        <span class="type">VirtualMachine</span> <span class="variable">attach</span> <span class="operator">=</span> VirtualMachine.attach(vm);</span><br><span class="line">        attach.loadAgent(client.getAbsolutePath());</span><br><span class="line">        attach.detach();</span><br><span class="line">        System.out.println(<span class="string">&quot;完成注入&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-作为-Javaagent-的-mod。"><a href="#2-1-作为-Javaagent-的-mod。" class="headerlink" title="2.1 作为 Javaagent 的 mod。"></a>2.1 作为 Javaagent 的 mod。</h3><p>首先我们在项目中创建 AttachPoint类 作为此 javaagent 的注入点。<br>接下来我们只需通过 MC 的 Classloader 动态加载我们的 mod 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.whitecola.promodulelite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.instrument.Instrumentation;</span><br><span class="line"><span class="keyword">import</span> net.minecraft.launchwrapper.LaunchClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttachPoint</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">agentmain</span><span class="params">(String args, Instrumentation instrumentation)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; classes : instrumentation.getAllLoadedClasses()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (classes.getName().startsWith(<span class="string">&quot;net.minecraft.client.Minecraft&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">LaunchClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> (LaunchClassLoader)classes.getClassLoader();</span><br><span class="line">                classLoader.addURL(AttachPoint.class.getProtectionDomain().getCodeSource().getLocation());</span><br><span class="line">                Class&lt;?&gt; client = classLoader.loadClass(Client.class.getName());</span><br><span class="line">                client.newInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看这里<br>Class&lt;?&gt; client &#x3D; classLoader.loadClass(Client.class.getName());<br>client.newInstance();</p><p>这里我们加载了我们的 Client 类，也就是我们 mod 的主类。<br>注意，它和 forge mod 的主类不同，为了区分我们就单独在 Forge mod 中实例化一个 Client 类 作为要加载的主类。</p><p>Forge 主类:      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.whitecola.promodulelite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.minecraft.init.Blocks;</span><br><span class="line"><span class="keyword">import</span> net.minecraftforge.common.MinecraftForge;</span><br><span class="line"><span class="keyword">import</span> net.minecraftforge.fml.client.registry.ClientRegistry;</span><br><span class="line"><span class="keyword">import</span> net.minecraftforge.fml.common.Mod;</span><br><span class="line"><span class="keyword">import</span> net.minecraftforge.fml.common.Mod.EventHandler;</span><br><span class="line"><span class="keyword">import</span> net.minecraftforge.fml.common.event.FMLInitializationEvent;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.event.EventManager;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.event.impls.MainMenuEvent;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.keybind.MainMenuInGameKeybind;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.<span class="keyword">module</span>.AbstractModule;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.<span class="keyword">module</span>.ModuleManager;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.<span class="keyword">module</span>.impls.combat.AutoClicker;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.<span class="keyword">module</span>.impls.movement.Eagle;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.<span class="keyword">module</span>.impls.movement.KeepSprint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Vector;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mod(modid = ProModuleLite.MODID, version = ProModuleLite.VERSION)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProModuleLite</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ProModuleLite proModuleLite;</span><br><span class="line">    &#123;</span><br><span class="line">        proModuleLite= <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Client client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MODID</span> <span class="operator">=</span> <span class="string">&quot;promodulelite&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VERSION</span> <span class="operator">=</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@EventHandler</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FMLInitializationEvent event)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//我们的 Client。</span></span><br><span class="line">         client = <span class="keyword">new</span> <span class="title class_">Client</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ProModuleLite <span class="title function_">getProModuleLite</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> proModuleLite;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client 类:     </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> top.whitecola.promodulelite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.minecraftforge.common.MinecraftForge;</span><br><span class="line"><span class="keyword">import</span> net.minecraftforge.fml.client.registry.ClientRegistry;</span><br><span class="line"><span class="keyword">import</span> net.minecraftforge.fml.common.FMLCommonHandler;</span><br><span class="line"><span class="keyword">import</span> org.lwjgl.opengl.Display;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.event.EventManager;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.event.impls.EventToInvokeModules;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.event.impls.MainMenuEvent;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.keybind.MainMenuInGameKeybind;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.<span class="keyword">module</span>.ModuleManager;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.<span class="keyword">module</span>.impls.combat.AutoClicker;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.<span class="keyword">module</span>.impls.movement.Eagle;</span><br><span class="line"><span class="keyword">import</span> top.whitecola.promodulelite.<span class="keyword">module</span>.impls.movement.KeepSprint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Client instance;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">state</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">ModuleManager</span> <span class="variable">moduleManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModuleManager</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">EventManager</span> <span class="variable">eventManager</span> <span class="operator">=</span> EventManager.getEventManager();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Client</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (state) <span class="keyword">return</span>;</span><br><span class="line">        state = <span class="literal">true</span>;</span><br><span class="line">        MinecraftForge.EVENT_BUS.register(<span class="built_in">this</span>);</span><br><span class="line">        FMLCommonHandler.instance().bus().register(<span class="built_in">this</span>);</span><br><span class="line">        MinecraftForge.EVENT_BUS.register(eventManager);</span><br><span class="line">        instance = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">        registerEvent();</span><br><span class="line">        registerKeyBinds();</span><br><span class="line">        registerModules();</span><br><span class="line"></span><br><span class="line">        Display.setTitle(<span class="string">&quot;ProModule Lite v0.3 [1.8.9] powered by White_cola&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ModuleManager <span class="title function_">getModuleManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> moduleManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> EventManager <span class="title function_">getEventManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> eventManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerEvent</span><span class="params">()</span>&#123;</span><br><span class="line">        EventManager.getEventManager().addEvent(<span class="keyword">new</span> <span class="title class_">MainMenuEvent</span>());</span><br><span class="line">        EventManager.getEventManager().addEvent(<span class="keyword">new</span> <span class="title class_">EventToInvokeModules</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerKeyBinds</span><span class="params">()</span>&#123;</span><br><span class="line">        ClientRegistry.registerKeyBinding(MainMenuInGameKeybind.getInstance());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerModules</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//movement</span></span><br><span class="line">        getModuleManager().addModule(<span class="keyword">new</span> <span class="title class_">KeepSprint</span>());</span><br><span class="line">        getModuleManager().addModule(<span class="keyword">new</span> <span class="title class_">Eagle</span>());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以在Client类里注册我们的事件，或加入我们写好的 ModuleMnager 等等了，这里的 EventManager 是我自己实现的事件系统。</p><p>那么我们接下来只需要把 MCInjector 编译成 jar程序，并将我们的 mod 名命为我们写的 “Client.jar” 放在同一个目录下，打开 Forge MC 客户端，并且运行 MCInjector 即可注入成功。</p><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本篇文章我们实现了简单的 attach 热注入mod。但有的时候我们会发现这种方法用不了了，如 注入 LunarClient，我们得不到它的 vm。这种情况下我们就要深入 java 底层（也就是 CPP 层）来进行注入了，这个系列的下一篇文章我们就聊这个把。</p><p>注入的概念有很多。比如在 SpringBoot 里，注入是通过一种低耦合的方式创建对象，以实现 aop。而在 这里我们是说的动态注入 mod。在 Mixin 那里 注入又成了一种被框架提供的技术，用来编写注入类 让 Mixin 进行字节码修改。我们要清楚我们说的是哪个注入。</p>]]></content>
      
      
      <categories>
          
          <category> Minecraft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> java </tag>
            
            <tag> Minecraft Mod </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
