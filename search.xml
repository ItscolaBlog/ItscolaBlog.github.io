<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>此博客为我的新博客，我旧版的博客的内容会选择性搬运过来。</title>
      <link href="/posts/44914.html"/>
      <url>/posts/44914.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 多线程 - 01</title>
      <link href="/posts/27205.html"/>
      <url>/posts/27205.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java-多线程-多线程的必备概念（一）"><a href="#Java-多线程-多线程的必备概念（一）" class="headerlink" title="Java 多线程 - 多线程的必备概念（一）"></a>Java 多线程 - 多线程的必备概念（一）</h1><p>这篇文章，可以根据自己的情况来学习，如果你忙于考试等，可以重视一些概念。如果你忙于入门或巩固，可以不那么重视那些概念。</p><p><u>这边的文章结构我会参考一些书的目录，但内容是不同的。我会用我的话，让你更容易理解的解释出来。如果非要说，你也可以把它理解成一份笔记，但是这篇笔记对其他人也适用。<br></u></p><h2 id="一，何为线程"><a href="#一，何为线程" class="headerlink" title="一，何为线程"></a>一，何为线程</h2><h3 id="1-线程的特征"><a href="#1-线程的特征" class="headerlink" title="1. 线程的特征"></a>1. 线程的特征</h3><p>线程类似于进程，而又不同于进程。有了多线程，<u>可以异步执行代码，不再受到前面代码没执行完后面就不能执行的问题</u>，这大大提高了效率。 <u>但同时，使用多线程也要重视着线程安全问题。</u></p><h3 id="2-线程的概念"><a href="#2-线程的概念" class="headerlink" title="2. 线程的概念"></a>2. 线程的概念</h3><p><strong>线程是执行过程中 进程 产生的动态的 代码片段执行者，对于一个进程中的不同线程，可以同时间段执行不同的代码片段，它们之间通常不会互相影响执行进度。因为多个线程共享同一个进程的资源，不同线程才可能会同时访问同一个字段，这属于线程安全问题。</strong>     </p><p>（这里的“代码片段”指的是一段代码，包含一段代码调用的其它片段代码）。</p><blockquote><p>多个线程，运行在同一个进程当中，由进程触发，共享进程的系统资源。多进程之间是不会共享资源多。    <del>线程之间的切换快于进程。（放到后面讲）</del></p></blockquote><blockquote><p>通常情况下，我们的代码只能上一行走完走下一行。不仅效率低，即使我们的 CPU 有很多个核心，也很可能是一核有难，多核围观。 这时候线程派上用场了，他可以 同 时 间段执行多个代码片段，并且多个线程共享一个程序中的 字段。大大提升效率，并且充分利用 CPU 多核性能。（这并不代表单核 CPU 不兼容多线程代码）</p></blockquote><h3 id="3-为什么多线程如此重要"><a href="#3-为什么多线程如此重要" class="headerlink" title="3. 为什么多线程如此重要"></a>3. 为什么多线程如此重要</h3><p>假如我们的程序正常运行时，要进行读写本地的文件数据。但是如果文件很大，读写了很久，那我们的其它代码就别想运行了，直接卡住。  而有了多线程，我们可以一边读写，一边在正常运行程序的代码。</p><p>java 提供了 Thread 类来实现多线程运行。</p><blockquote><p>这边聊下 python，据我了解 目前为止。python 的多线程不是在一个进程下的。而是在进程的多线程下，也就是说，它的多线程是套在多线程下的。</p></blockquote><h2 id="二，线程组成"><a href="#二，线程组成" class="headerlink" title="二，线程组成"></a>二，线程组成</h2><h3 id="1-代码"><a href="#1-代码" class="headerlink" title="1. 代码"></a>1. 代码</h3><ol><li>代码：要运行的代码片段，传入 Thread 类后，顺序执行。    <blockquote><p>后面我们会介绍几种创建方法。</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 下方为象征代码，并不是精准这样写，为了更好的向你解释。</span><br><span class="line"></span><br><span class="line">new Thread(new Runnable()&#123;</span><br><span class="line">  run()&#123;   run方法 （象征）</span><br><span class="line">    代码片段    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当然，我们可以用上 新版本 java 的 lambda 表达式。</p><blockquote><p>如果你不懂 lambda 可以理解为省去 new Runnable 的步骤，方便的创建了匿名内部类 ()-&gt;{} 中的 () 代表了传入 run 方法的参数，没有就是 ()，很显然 run 方法不需要参数。{} 则对应了 run 方法的方法体。 </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Thread(()-&gt;&#123;</span><br><span class="line">  代码片段 </span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure><h3 id="2-数据"><a href="#2-数据" class="headerlink" title="2. 数据"></a>2. 数据</h3><ol start="2"><li>数据：包括代码片段中的代码调用的其它地方的数据。      <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int a = 15; // 数据</span><br><span class="line">String hello = “helloWord“; // 数据</span><br><span class="line"></span><br><span class="line">new Thread(()-&gt;&#123;</span><br><span class="line">  System.out.println( a + hello ); // “15helloWord“</span><br><span class="line">&#125;).start(); </span><br></pre></td></tr></table></figure></li></ol><p>但是目前 java 在 闭包 上有一个问题，也算是短板，比较麻烦些，可以 WeakReference 等解决。      </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String hello = “helloWord“;</span><br><span class="line">new Thread(()-&gt;&#123;</span><br><span class="line">  hello = “hi“; // 这是不行的，在更改时，上面必须变成 final 修饰符，然后在下面赋值。</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-“虚拟-CPU”"><a href="#3-“虚拟-CPU”" class="headerlink" title="3. “虚拟 CPU”"></a>3. “虚拟 CPU”</h3><p>指的是 Thread 类，就像一个虚拟的 CPU，控制顺序运行。      </p><blockquote><p>后面会讲。</p></blockquote><h2 id="三，创建线程的几种方式"><a href="#三，创建线程的几种方式" class="headerlink" title="三，创建线程的几种方式"></a>三，创建线程的几种方式</h2><h3 id="1-继承-Thread-类"><a href="#1-继承-Thread-类" class="headerlink" title="1. 继承 Thread 类"></a>1. 继承 Thread 类</h3><p>这个很容易理解。<br>我们创建一个类，继承于 Thread 类，并实现 run 方法 线程体，将要多线程执行的代码放入 run 方法中。然后创建我们创建的类的对象，再调用 start 方法。</p><blockquote><p>比起 Runnable 这样可以直接在 类里调用一些 Thread 的方法，调用更方便一些。</p></blockquote><h3 id="2-实现-Runnable-接口"><a href="#2-实现-Runnable-接口" class="headerlink" title="2. 实现 Runnable 接口"></a>2. 实现 Runnable 接口</h3><blockquote><p>任何线程功能的类，实际上都实现了 Runnable 接口。</p></blockquote><p>Runnable 是一个接口，其中定义了 run 线程体。我们只需要一个类实现 Runnable 接口，实现线程体。然后将其作为 new Thread() 的参数传入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Runnable runa = new ImplementedRunnableClass(); //实现了 Runnable 的类</span><br><span class="line"></span><br><span class="line">Thread thread1 = new Thread(runa);</span><br><span class="line">thread1.start();</span><br><span class="line"></span><br><span class="line">Thread thread2 = new Thread(runa);</span><br><span class="line">thread1.start();</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Thread thread2 = new Thread(()-&gt;&#123;</span><br><span class="line">  // 代码片段</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">thread2.start();</span><br></pre></td></tr></table></figure><blockquote><p>由于 java 属于单继承，继承了 Thread 就不能继承其它类，所以当我们还要继承其它类的时候，就可以通过实现 Runnable 接口来做到。实现接口数量是不限制的。  如果前面的都是用 Runnable 一直用下去还能保持代码一致。</p></blockquote><h3 id="3-Callable和Future（第二篇讲解）"><a href="#3-Callable和Future（第二篇讲解）" class="headerlink" title="3. Callable和Future（第二篇讲解）"></a>3. Callable和Future（第二篇讲解）</h3><h2 id="四，线程状态"><a href="#四，线程状态" class="headerlink" title="四，线程状态"></a>四，线程状态</h2><p>通过 Thread，创建创建实例，启动线程，终止线程，挂起线程。     </p><p>Thread 创建新线程要执行的代码在run 方法内，创建多线程要执行的方法，我们称作 <u>线程体</u>。在初始化的时候传给线程。</p><p>线程建立初始化后，java 的 native 方法自动调用 run 方法。然后就有了一个新线程。</p><blockquote><p>我们如果手动调用了 run 方法，是不会有新线程出现的，只会在所在的线程来运行。所以说我们如果想创建多线程，通常不会手动调用 run 方法。</p></blockquote><p>线程有四个状态： 新建，可运行状态，死亡与堵塞。</p><h3 id="1-新建"><a href="#1-新建" class="headerlink" title="1. 新建"></a>1. 新建</h3><p>这时候 Thread 对象已经建立，已经为其分配了内存空间和资源，但是还是处于不可运行阶段。我们需要调用 strat 方法来使其进入到 可运行 状态。</p><blockquote><p>注意，是start 方法 ，并不是调用 run 方法。</p></blockquote><h3 id="2-可运行"><a href="#2-可运行" class="headerlink" title="2. 可运行"></a>2. 可运行</h3><p>这个状态已经调用 start 方法了，按照我们的常理认知，线程应该已经运行了。为什么还会分为可运行状态呢？</p><p>事实上，这种状态有两种可能：正在运行，或没有运行。<br>为什么？ 这是因为 CPU 不一定能分配出资源来给它运行，特别是单核 CPU。     </p><p>所以会把可运行的线程，但实际上没有运行的，放入一个队列，我们称这个队列为 <u>就绪队列</u>。</p><p>调用 start 方法可以使线程进入可运行状态。</p><blockquote><p>并不是调用了 strat 方法，线程就立马运行了，而是要在 CPU 能分配给资源的情况下才能运行。可运行但还没有运行的线程会被放入 就绪队列 当中。</p></blockquote><blockquote><p>如果是 单核 CPU，通常最多只能有一个线程处于运行状态，其它的都是就绪状态。可运行，却没运行，排在 就绪队列里。 它们会切换运行。</p></blockquote><h3 id="3-死亡"><a href="#3-死亡" class="headerlink" title="3. 死亡"></a>3. 死亡</h3><p>两种情况一个线程会死亡。 <u>当 run 方法内的所有 代码段（语句）全部执行完成，线程就会死亡了</u>。另一种情况是，<u>当线程遇到了异常，被迫进入死亡状态</u></p><h3 id="4-阻塞"><a href="#4-阻塞" class="headerlink" title="4. 阻塞"></a>4. 阻塞</h3><p>正在执行的线程遇到特殊原因，暂停执行，进入阻塞状态。阻塞状态的线程必须要等到阻塞原因消除，才能重新进入 就绪队列。</p><p>sleep() 和 wait() 这两个方法都可以将线程阻塞。</p><blockquote><p>为什么我们需要阻塞线程？ 假如我们需要线程中有个循环体，我们要它每 5 秒循环一次。这就需要用到阻塞来实现了。这种阻塞是很有必要的，一个线程阻塞不会影响其它线程。还有其它情况，可以想想。 </p></blockquote><h3 id="5-中断线程"><a href="#5-中断线程" class="headerlink" title="5. 中断线程"></a>5. 中断线程</h3><p>有两种方式，一种必要强制。     </p><p>stop() 方法，它会在运行的线程中抛出一个异常，让线程直接死亡。 以此达到中断效果。不过目前 java 已经不推荐使用了。但也不是绝对的，这个方法在你想立即终止时，也可以使用。</p><p>interrupt() 方法，这个是比较常用的方法，它会向线程发送一个中断请求，把线程的 interrupted 字段状态变为 true。 如果线程处于 阻塞 (block) 状态，那么会抛出异常 InterruptedException 。</p><p>static boolean interrupted() 静态方法，当我们调用它时，会返回是否中断成功，也就是获取 interrupted 的 值 ，之后，会将 interrupted 变为默认值 false；</p><p>boolean isInterrupted() 这个就是获取  interrupted 的 值，仅此而已。</p><h2 id="五，线程的控制"><a href="#五，线程的控制" class="headerlink" title="五，线程的控制"></a>五，线程的控制</h2><h3 id="1-线程的操作"><a href="#1-线程的操作" class="headerlink" title="1. 线程的操作"></a>1. 线程的操作</h3><ol><li>start()：但一个线程被创建，需要调用它的 start 方法，才能使线程真正的进入可运行状态。      </li><li>run()：线程体，需要重写 run 方法，之后交给 Java 来调用。直接调用 run 方法，会使得直接在本线程运行代码，而不会在新线程运行。</li><li>isAlive()：判断线程是否在活动。</li><li>sleep(int millisecond)：堵塞线程指定毫秒。</li><li>wait()：让线程处于等待状态。</li><li>yield</li></ol><h3 id="2-线程调度"><a href="#2-线程调度" class="headerlink" title="2. 线程调度"></a>2. 线程调度</h3><p>线程调用 start 方法后，进入了可运行状态后，<u>并不一定立马执行</u>。而是进入 就绪队列，等待 CPU 进行调度。 具体 CPU 如何调度，这就属于线程调度问题了。</p><blockquote><p>对于 java 线程调度通常是抢占式，而不是时间片式。</p></blockquote><p><del>你可以大概先了解这段引用，不理解也没关系，继续往后看。</del>     </p><p>一旦一些线程被调度到执行，CPU 对于其能执行的线程已经满了，它们就会一直执行下去。直到线程死亡，堵塞，中断。再或者被高优先级的线程抢占执行的权利。</p><p>线程都会有优先级，默认优先级为 NORM_PRIORITY 也就是 5。<br>最高优先级是 MAX_PRIORITY，也就是 10。<br>最低优先级为 MIN_PRIORITY，也就是 1 。     </p><p>java.lang.Thread 类中，有几个关于优先级的常用方法：           </p><ol><li>int getPriority() ：获得被调用此方法的线程的优先级。</li><li>void setPriority(int priority)： 设置线程的优先级。</li><li>static void yield()：让当前线程放弃执行权。</li></ol><blockquote><p>对于优先级，java 的策略如下，也是一种规范：      </p><ol><li>优先级高先执行，优先级低后执行。</li><li>优先级越高，任务越重要。</li><li>同优先级情况下，“先进先出”。</li></ol></blockquote><h3 id="2-1-线程阻塞"><a href="#2-1-线程阻塞" class="headerlink" title="2.1 线程阻塞"></a>2.1 线程阻塞</h3><blockquote><p>线程被阻塞时，阻塞线程按顺序排序 组成， <u>阻塞队列</u>。      </p></blockquote><blockquote><p>就绪队列，当 CPU 空闲，就绪队列不空闲。 就绪队列第一个具有高优先级的线程获得执行权。一个线程被抢占或阻塞后，它会被放到 就绪队列 的队尾。</p></blockquote><p>Thread.sleep():       </p><p>Thread.sleep(int millisecond) 是我们常用的阻塞方法。它可能会抛出 中断异常 (InterruptedException)，因此要进行一定的捕捉异常。 参数为毫秒（最小休眠时间），也就是在让调用此方法的线程进入 “最小时间” 的 休眠。   </p><p>为什么说是“最小时间”，因为这个时间结束后，只会将它变回 可运行状态，至于什么时候执行，就要看 CPU 了，通常从堵塞到运行的时间大于最小时间。</p><p>yield():     </p><p>当一个线程被调用了 yield 方法后，这个线程会被放在就绪队列的队尾，把机会让给同优先级的其它线程。如果没有线程，yield() 不进行任何工作。</p><blockquote><p>sleep() 后，线程会离开就绪状态，让给其它线程。 而 yield() 是把线程就绪状态放到就绪队列列尾 ,把机会让给同优先级线程。</p></blockquote><h3 id="3-结束线程"><a href="#3-结束线程" class="headerlink" title="3. 结束线程"></a>3. 结束线程</h3><p>当 run 方法内的语句 retrun 或 走到结尾后，这属于自然死亡。当线程由于异常线程不得不结束，这种属于线程的被迫死亡。 还有种情况是调用 interrupt() 方法中断线程执行。GC 会安排它们上路。</p><blockquote><p>stop 方法会直接抛出异常，让线程被迫死亡。 也相当于将线程停止了。</p></blockquote><p> isAlive() 此方法可以判断一个线程是否是 可运行状态。但并不代表着它有执行权，它可能还在就绪队列当中。</p><h3 id="4-挂起线程"><a href="#4-挂起线程" class="headerlink" title="4. 挂起线程"></a>4. 挂起线程</h3><ul><li>sleep()</li><li>wait() notify() &#x2F; notifyAll()</li><li>join()</li></ul><ol><li>sleep(int ms)：<br>它可以让一个线程进入休眠，可以指定时间。但是时间一过并不会立马执行，而是变成可运行状态，等待 CPU 的重新调度。</li></ol><p>下面四种情况可能会使它被立马调度</p><ul><li>被唤醒后，优先级很高</li><li>就绪队列是空的</li><li>前面的线程被堵塞<blockquote><ul><li>程序处于时间片系统中</li></ul></blockquote></li></ul><ol start="2"><li><p>wait , notify , notifyAll<br>wait 方法会让一个线程进入等待状态，直到对象被调用了 notify() , notifyAll()。这可以一定解决线程的安全问题。如果追求极致效率的并发，可以用这个手动操作线程的 等待 唤醒。</p></li><li><p>join<br>当在 线程 1 中调用 线程 2 的 join 方法。线程 1 会等待线程 2  执行完成，然后再执行。可以想象为，我们把线程 1 加入到了线程 2 的后方，两个线程连接起来。</p></li></ol><p>join 方法还可以加一个参数，变为:<br>join(int timeOut) :        </p><p>这就变成了设置一个等待的上限，如果等 被调用线程 等到 ms 时间过去了，还没等到，那就不等了。</p><h2 id="六，线程安全问题（线程互斥）"><a href="#六，线程安全问题（线程互斥）" class="headerlink" title="六，线程安全问题（线程互斥）"></a>六，线程安全问题（线程互斥）</h2><p>我们知道，多个线程会共享一个进程中的 字段 与 方法。这就会有线程之间的冲突，无法保证线程的一致性了。         </p><h3 id="1-互斥问题"><a href="#1-互斥问题" class="headerlink" title="1. 互斥问题"></a>1. 互斥问题</h3><p>比如 一个单列设计模式 的类：<br>不知道单列设计模式是什么也没关系，只要知道单列设计模式的目的是让类只有一个实例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Launcher&#123;</span><br><span class="line">  public static Launcher instance = null;</span><br><span class="line"></span><br><span class="line">  private Launcher()&#123; // 对构造方法进行限制，不允许手动 new 对象。</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static Launcher getInstance()&#123; // 只允许通过此方法获取唯一的实例</span><br><span class="line">    if(instance == null)&#123;</span><br><span class="line">      instance = new Launcher();</span><br><span class="line">    &#125;</span><br><span class="line">    return instance;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当线程 A 调用 getInstance() 判断完 if ，该执行 instance &#x3D; new Launcher() 了。此时还在执行（需要一定时间）（又或者 CPU 执行权被抢走），然后 线程 B 也调用了 getInstace ，因为 instance 还没被创建，自然可以进入 if 语句中。 两个线程都进入了 if 语句，都能 new，出现了两个 Launcher 对象。</p><p>单列模式就是想让对象唯一，并发情况下创建了两个显然不符合我们所设想的。     </p><p>如何解决？<br>我们最常用的方式是 直接写成这样：       </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Launcher&#123;</span><br><span class="line">  public static Launcher instance = new Launcher();</span><br><span class="line"></span><br><span class="line">  private Launcher()&#123; // 对构造方法进行限制，不允许手动 new 对象。</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static Launcher getInstance()&#123; // 只允许通过此方法获取唯一的实例</span><br><span class="line">    return instance;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>但是我们现在学得是 线程互斥 线程安全，我们不会使用这种 最常用 最简单 的方式来解决。</p><h3 id="2-对象的锁定标志-单列模式-demo"><a href="#2-对象的锁定标志-单列模式-demo" class="headerlink" title="2. 对象的锁定标志 - 单列模式 demo"></a>2. 对象的锁定标志 - 单列模式 demo</h3><blockquote><p>这是共享资源访问的不完整性导致的。简单来说，<u>被共享的资源无法被完整的访问操作</u>，导致了这个问题。 <u>所以我们要解决这个问题，就要保证共享数据操作的完整性。</u></p></blockquote><p>有没有一种办法，能让一个线程在访问一个方法的时候，其它线程不来干扰。等线程将方法调用完再让其它线程来调用？ </p><p>有，这种保证共享数据操作的完整性的方式叫 共享数据操作的同步，<u>共享数据被称作 条件变量</u>。Java 有一种上锁机制，用锁定标志来解决这个问题。</p><blockquote><p>“对象互斥锁” 也就是 “监视器” ，可以阻止多个线程同时访问一个条件变量。     </p></blockquote><ol><li>synchronized ：<br>它可以声明在一个方法，或一段代码上。<br>想想看，一个线程调用 getInstace() 的时候，上一个锁，等调用完了，再把锁解开。 然后下个线程调用的时候再上锁，调用完再解开 ……</li></ol><blockquote><p>我们在这里先暂时这样理解，下文会给你不同的理解。 也就是真正步骤。</p></blockquote><blockquote><p>通常比起 volatile 我们更常用 synchronized。 被synchronized 括住的代码段称为 <u>代码块</u>。</p></blockquote><p>上锁的情况下，别的线程除非获取到锁（的标记）才能进入 方法 或 一段代码。只有等待这个线程调用完毕，才能把锁（的标记）还回去，给别的线程用。</p><ol start="2"><li>volatile ：<br>它可以声明在 字段上。<br>synchronized 只能给 方法 或 一段代码 上锁。 而 volatile 可以给字段上锁。      <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public volatile int num = 233;</span><br></pre></td></tr></table></figure></li></ol><p>好，我们来给我们的单列模式代码加上锁。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Launcher&#123;</span><br><span class="line">  public static Launcher instance = null;</span><br><span class="line">  public static Object obj = new Object();</span><br><span class="line"></span><br><span class="line">  private Launcher()&#123; // 对构造方法进行限制，不允许手动 new 对象。</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static Launcher getInstance()&#123; // 只允许通过此方法获取唯一的实例</span><br><span class="line">    synchronized(obj)&#123;  </span><br><span class="line">    </span><br><span class="line">    if(instance == null)&#123;</span><br><span class="line">      instance = new Launcher();</span><br><span class="line">    &#125;</span><br><span class="line">    return instance;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这边要告诉你的是，上面的常规方法才是最好的解决方案。 <u>我们这样写只为了演示 线程互斥问题。 如果你用到单列模式，还是直接 new 吧，不要在 getInstace 里面 new</u>。</p><p>synchronized(Object obj){} 中的参数，可以是任何类型（通常都默认继承了 Object 类）。这个参数代表的就是锁。 思考一下，我直接写成 synchronized(new Object()){} 行不行呢？      </p><p>绝对不行，这样它就失去意义了。 我们说一个线程执行一段有锁的代码的时候，会上锁。如果另一个线程在有锁的情况下想执行，要判断一下 synchronized(Object obj){} obj 这个锁是否已经被其它线程用了，如果被用了就要等前面的线程把锁用完。        </p><p>假设每次判断的时候，都来一个 new Object() ，每次判断都创建一个新锁，那这锁就没任何意义了。肯定每次锁都没被占用。</p><p>再来看下面的代码，我们一步步分析：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class NumDemo&#123;</span><br><span class="line">  private int num a = 10;</span><br><span class="line"></span><br><span class="line">  public void addOnce()&#123;</span><br><span class="line">    synchronized(this)&#123;</span><br><span class="line">      a++;</span><br><span class="line">      a++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  public void substractOnce()&#123;</span><br><span class="line">    synchronized(this)&#123;</span><br><span class="line">      a--;</span><br><span class="line">      a--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args)&#123;</span><br><span class="line">    NumDemo numDemo = new NumDemo();</span><br><span class="line"></span><br><span class="line">    Thread thread1 = new Thread(()-&gt;&#123;</span><br><span class="line">      for(int i=0;i&lt;10;i++)&#123;</span><br><span class="line">        numDemo.addOnce();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">    Thread thread2 = new Thread(()-&gt;&#123;</span><br><span class="line">      for(int i=0;i&lt;10;i++)&#123;</span><br><span class="line">        numDemo.substractOnce();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>当 thread1 正在 调用 addOnce() 十次，调用过程中，因为有synchronized(this) 从对象 this 中得到标记，标记这个锁不可得。 然后此时 thread2 要调用 substractOnce() 十次，但是也有 synchronized(this)，发现对象 this 取得的标记，这个标记被取走了，那么它就会进入 <u>等待队列</u>。</p><p><u>直到 thread1 运行完 ，将标记自动还给对象， thread2 才能从对象哪里获取标记，然后执行。</u></p><p>这个等待队列与对象锁定标志相连，当标记被还给对象，等待队列的第一个线程会拿下这个标记，开始执行。</p><p><u>还有一种情况，如果 thread1 因为异常，被迫死亡。 标记仍然会自动换给对象。</u>      </p><blockquote><p>synchronized 标记的 代码段 或 方法 被称为 “对象互斥锁” 锁住部分。</p></blockquote><p>当我们把 synchronized 放在方法声明上，锁默认也是 this。  但是对于直接给整个方法当作同步块，需要执行完的时间更长，会降低效率。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public synchronized addOnce()&#123;</span><br><span class="line">   ...... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七，线程的同步"><a href="#七，线程的同步" class="headerlink" title="七，线程的同步"></a>七，线程的同步</h2><p>多个线程在做的任务，在任务上可能不相关。但是可能却可能会互相影响。</p><h3 id="1-同步问题"><a href="#1-同步问题" class="headerlink" title="1. 同步问题"></a>1. 同步问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class NumDemo&#123;</span><br><span class="line">  private int num a = 10;</span><br><span class="line"></span><br><span class="line">  public void addOnce()&#123;</span><br><span class="line">    synchronized(this)&#123;</span><br><span class="line">      a++;</span><br><span class="line">      a++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  public void substractOnce()&#123;</span><br><span class="line">    synchronized(this)&#123;</span><br><span class="line">      a--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>虽然不是同一时间，但是是同一个代码～。我们 ..</del></p><p>想一个问题，假如 num 代表接下来的任务数量。addOnce() 每调用一次，就会加两个任务。substractOnce() 每调用一次，就会少两个任务。 </p><p>任务数量不可能是负的。 如果一边调用 addOnce() ，另一边调用 substractOnce()。两个方法要同时不停的调用。 玩意任务数为 0 ，而调用了  substractOnce() ，任务数减到了负数 那怎么办？</p><p>你也许会想到，我们每次调用 substractOnce() 时，判断一下任务数量是否为0。</p><p>但是这边有一个更好的方法。<br>java.lang.Object 中定义了三个方法： wait() , notify() , notifyAll()。</p><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2. 方法"></a>2. 方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class NumDemo&#123;</span><br><span class="line">  private int num a = 10;</span><br><span class="line"></span><br><span class="line">  public void addOnce()&#123;</span><br><span class="line">    synchronized(this)&#123;</span><br><span class="line">      a++;</span><br><span class="line">      a++;</span><br><span class="line">      this.notify();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  public void substractOnce()&#123;</span><br><span class="line">    synchronized(this)&#123;</span><br><span class="line">      if(num == 0)</span><br><span class="line">        this.wait()</span><br><span class="line">      a--;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>wait 方法可以让当前的线程等待，将当前线程释放 “对象互斥锁”，然后进入 wait 等待队列。<br>notify 方法可以唤醒一个等待队列中的线程。比起 notifyAll 方法，notifyAll 可以全部唤醒。</p><p>这样当我们减少 num 的时候，判断到 num 等于 0 ，就让线程 释放 锁，并进入 等待队列。 当增加 num 的之后，就会唤醒等待队列的锁，如果没有，那么 notify 就不起作用。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java IO 基础 - 01</title>
      <link href="/posts/58218.html"/>
      <url>/posts/58218.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java-IO-基础知识"><a href="#Java-IO-基础知识" class="headerlink" title="Java IO 基础知识"></a>Java IO 基础知识</h1><p>在这里我们会讲解一些必备的基础知识，以便使用。<strong>会把最实用的内容挑出来，方便理解。如果想看 Java I&#x2F;O 的所有知识，网上的文章已经很多了</strong>。 <u>这篇文章追求的是简单易懂</u>。</p><p>注意，看之前，强烈建议先理解，<u>装饰设计模式</u>。它能让你懂得 缓冲流 转换流 的实现原理。</p><h2 id="一-数据流的概念"><a href="#一-数据流的概念" class="headerlink" title="一 数据流的概念"></a>一 数据流的概念</h2><p>输入文字，读取文件数据，向文件写入数据。这些 输入&#x2F;输出 源头（数据）在java中都称为流。输入和输出的数据就被称为数据流，它是有顺序的一组 byte 集合。</p><p>输入输出 的方式有 输入流，输出流。<br>输入流只能输入，输出流只能输出。读取数据时，将数据源要与数据流连接。(后面会讲。)      </p><blockquote><p>可以把流想象成一堆液体，液体里就是我们要的数据。如果我们要运输液体，那我们必须要弄“管道”用于传输液体。管道的不同，会有不同到特性。（这个比喻不恰当的地方在于，用管道运输流时，流是有顺序的进入。但这个比喻更容易理解。）</p></blockquote><p>java 的流操作在 java.io 包中，java.io  中分为两类流，字节流和字符流。JDK 字符流的加入晚于字节流，用于更好的处理字符。提供了一些字符操作的参数等。</p><blockquote><p><u>(根据运输“管道”的不通，可以分出 字节流 和 字符流。它们的运输方式不一样。)</u></p></blockquote><p><img src="/JavaIO/1.png" alt="图片"></p><h3 id="1-输入数据流-InputStream"><a href="#1-输入数据流-InputStream" class="headerlink" title="1. 输入数据流 (InputStream)"></a>1. 输入数据流 (InputStream)</h3><p>输入数据流为只能读取，不能写入的数据流。<br><u>所有字节流中的输入数据流，都继承自InputStream 抽象类，实现了它的方法，字段。<br></u></p><p>它有几个常用方法：<br>int read(); 从输入流读取一个字节的数据。<br>int read(byte[] b); 读取 b.lenght 个字节，并放入数组中。<br>int read(byte[] b, int off, int len);  读取 len 个字节，并放入 b ，从数组下标 off 开始。     </p><p>这些 read 方法，会返回 0 - 255 int类型返回值，当读取结束时， 会返回 -1 。</p><blockquote><p>可以看出输入字节流是以 byte 为单位，一个一个将流运输的。 当然，字节流的输出也是这样的。</p></blockquote><p>void close(); 关闭流，释放资源。(实际上 Java 的 GC 会在之后自动关闭，但是为了安全稳定可读，最好还是手动关闭流。)</p><p>int available(); 返回可读的字节数量。</p><p>long skip(long n); 跳过 n 个字节。</p><p>boolean markSupported(); 判断流是否支持标记流。</p><p>void mark(int readLimit); 标记读取的位置。</p><p>void reset(); 重置读取位置，回到上一个标记点。</p><h3 id="2-输出数据流-OutputStream"><a href="#2-输出数据流-OutputStream" class="headerlink" title="2. 输出数据流(OutputStream)"></a>2. 输出数据流(OutputStream)</h3><p>输出数据流为只能写入，不能读取数据流。<br><u>所有字节流中的输出数据流，都继承自OutputStream 抽象类，实现了它的方法，字段。<br></u></p><p>它有几个常用方法：<br>void write(int b) 将字节 i 写入到数据流中，只输出参数的最低 8 位。<br>void write(byte b[]) 将字节数组 b 全部写入到数据流中。<br>void write(byte b[],int off,int len) 将字节数组 b 从 off 开始，写 len 长度字节。     </p><p>void close() 关闭输出流。     </p><p>void flush() 刷新输出流，写出缓冲的字节。    </p><h2 id="二-常用字节流"><a href="#二-常用字节流" class="headerlink" title="二 常用字节流"></a>二 常用字节流</h2><p>字节流是继承了 InputStream 和 OutputStream 两个抽象类的 输入流和输出流。<br><u>它在输入时&#x2F;读取时，是一个字节一个字节的读取。</u>    </p><h3 id="1-文件数据流-FileOutputStream-amp-FileInputStream"><a href="#1-文件数据流-FileOutputStream-amp-FileInputStream" class="headerlink" title="1. 文件数据流(FileOutputStream &amp; FileInputStream)"></a>1. 文件数据流(FileOutputStream &amp; FileInputStream)</h3><p>文件数据流包括 FileInputStream 和 FileOutputStream ，一个继承了  InputStream  (输入流) ， 一个继承了 OutputStream (输出流)。</p><p>主要用于文件的输入和输出。数据源为文件。 并且不支持 mark 与 reset 方法。</p><p>先来看输入流：</p><p>我们可以通过 new FileInputStream(String path) 或 new FileInputStream(File file) 来指定我们要读取的文件。     </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public static byte[] readFile(File file)&#123;</span><br><span class="line">        if(!file.isFile())&#123;</span><br><span class="line">           return null;</span><br><span class="line">        &#125;</span><br><span class="line">        try(FileInputStream fis = new FileInputStream(file)&#123;</span><br><span class="line">            byte[] data = new byte[fis.available()];</span><br><span class="line">            fis.read(data);</span><br><span class="line">            return data;</span><br><span class="line">        &#125;catch (IOException e)&#123;</span><br><span class="line">            return new byte[0];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">当找不到指定文件时，会出现 FileNotFoundException 异常 (上方 demo 提前判断过了)。 它属于 IOException，可以捕捉声明 IOException。</span><br><span class="line"></span><br><span class="line">注意，将创建输入流的代码写在 try 里，会自动进行 close。 不写在 try 里要记得写。</span><br><span class="line"></span><br><span class="line">再来看输出流：</span><br><span class="line"></span><br><span class="line">同样的，我们可以通过 new FileOutputStream(String path) 或 new FileOutputStream(File file) 来指定我们要读取的文件。  以及我们可以在后面加个 boolean append 参数来决定是否要覆盖文件。 例如 `OutputStream ops = new FileOutputStream(file,append); `</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>public static void writeFile(byte[] data,File file,boolean append) throws IOException{<br>        if(!file.getParentFile().exists()){<br>            file.getParentFile().mkdirs();<br>        }</p><pre><code>    if(!file.isFile())&#123;        file.createNewFile();    &#125;    try(OutputStream ops = new FileOutputStream(file,append))&#123;              ops.write(data);        ops.flush();    &#125;&#125;</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">当然，上方的代码我们还可以这样写 `ops.write(String str)` 来写入字符串</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2. 过滤器数据流</span><br><span class="line">它的实现采用了 装饰设计模式（包装模式），有兴趣的话可以搜索看下，还是挺实用的。</span><br><span class="line"></span><br><span class="line">顾名思义，过滤器。 就是给 数据流 后面加个过滤器，然后再通过 过滤器 进行 输入/输出 操作。过滤器会在中间起到特殊处理作用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 2.1 缓冲区数据流（BufferedInputStream &amp; BufferedOutputStream）</span><br><span class="line">很多人对数据流很熟悉，但是缓冲区就弄不清了。       </span><br><span class="line"></span><br><span class="line">缓冲区也是过滤器的一种。    </span><br><span class="line"></span><br><span class="line">它其实就是在原本 数据输入/输出流 后加了个缓冲区。 缓冲区可以让我们一下得到一堆数据，然后再传输。</span><br><span class="line">&gt; 可以这样理解，我们要搬运一大堆东西，一下搬好几个总比一下搬一个要快上不少。</span><br><span class="line"></span><br><span class="line">这样做还有好处就是降低不同设备之间的 I/O 操作速度差异，提高效率。</span><br><span class="line"></span><br><span class="line">我们可以这样给 输入流/输出流 添加缓冲区。     </span><br></pre></td></tr></table></figure><p>FileInputStream fis &#x3D; new FileInputStream(“file“);<br>InputStream bis &#x3D; new BufferedInputStream(fis);</p><p>FileOutputStream fos &#x3D; new FileOutputStream(“file“);<br>OutputStream bos &#x3D; new BufferedOutputStream(fos);</p><p>&#x2F;&#x2F; 可以简化 例如<br>InputStream bis2 &#x3D; new BufferedInputStream(new FileInputStream(“file“));</p><p>&#x2F;&#x2F; 也可以自定义缓冲区大小</p><p>FileInputStream fis3 &#x3D; new FileInputStream(“file“);<br>InputStream bis3 &#x3D; new BufferedInputStream(fis,2048);</p><p>FileOutputStream fos3 &#x3D; new FileOutputStream(“file“);<br>OutputStream bos3 &#x3D; new BufferedOutputStream(fos,1024);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在 close 之前，调用flush 方法，将缓冲区内残留的数据流强制输出。    </span><br><span class="line">&gt; 因为最后剩余的数据流，不一定能塞满缓冲区。 所以会有剩余数据流。</span><br><span class="line"></span><br><span class="line">### 2.2 数据数据流</span><br><span class="line">这个数据流，并非像前面的一样，只能处理字节或字节数组。它允许通过数据流读写各种 Java 基本类型。</span><br><span class="line"></span><br><span class="line">创建方式也是经典 装饰设计模式。     </span><br></pre></td></tr></table></figure><p>DataInputStream dis &#x3D; new DataInputStream(InputStream is);</p><p>DataOutputStream dos &#x3D; new DataOutputStream(OutputStream is);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">然后是它的各种方法：     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">byte readByte();     </span><br><span class="line">short readShort(); </span><br><span class="line">int readInt();  </span><br><span class="line">long readLong();    </span><br><span class="line"> float readFloat();      </span><br><span class="line">double readDouble();    </span><br><span class="line">boolean readBoolean();    </span><br><span class="line">String readUTF();     </span><br><span class="line">char readChar();     </span><br><span class="line"></span><br><span class="line">对应的还有Write方法</span><br><span class="line"></span><br><span class="line">void writeByte(int abyte);      </span><br><span class="line">void writeLong(long along);    </span><br><span class="line"></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">DataInputStream 和 DataOutputStream 会成对出现。 一般是写完 之后会 读。 它们也可以读写字符串，但是为了不乱码，不要用它们来读写字符串。 要用之后会讲的 Reader / Writer。</span><br><span class="line"></span><br><span class="line">## 三 常用字符流(Reader / Writer)</span><br><span class="line">类似于 OutputStream 和 InputStream， 字符流是 Writer 和 Reader 两个抽象类。    </span><br><span class="line">它们的方法换成了字符或字符数组。    </span><br><span class="line"></span><br><span class="line">### 1. 读写者</span><br><span class="line">有了 Reader 和 Writer ，可以实现不同平台数据流中的数据转换。 Java 用 Unicode 来表示字符串以及字符，用 2 个字节来表示一个字符。 而ASCII 这样的字符集，用一个字节(8bit) 表示一个字符。 为了实现不同平台转换，JDK 出现了 字符流。</span><br><span class="line"></span><br><span class="line">可以通过 InputStreamReader 和 OutputStreamWriter 来进行，字节流与字符流之间的转换，也就是 转换流。    它们也继承了 Reader 和 Writer。 典型的 装饰模式。 通过转换，Java 用 Unicode 字符集 ，也实现了平台无关性。</span><br><span class="line"></span><br><span class="line">构造方法有:     </span><br><span class="line">InputStreamReader(InputStream is);      </span><br><span class="line">InputStreamReader(InputStream is , String encode); 指定编码</span><br><span class="line"></span><br><span class="line">OutputStreamWriter(OutputStream out);</span><br><span class="line">OutputStreamWriter(OutputStream out, String encode);  指定编码</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>InputStreamReader dis &#x3D; new InputStreamReader(new FileInputStream(“file“));</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Reader的方法有：</span><br><span class="line">     </span><br><span class="line">int read();     </span><br><span class="line">int read(char[] cbuf);       </span><br><span class="line">int read(char[] cbuf, int off, int len);     </span><br><span class="line">void close;     </span><br><span class="line">boolean ready();      </span><br><span class="line">void rest();      </span><br><span class="line">long skip(long n);</span><br><span class="line">void mark(intreadAheadLimit);     </span><br><span class="line">boolean markSupported();</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"></span><br><span class="line">Writer的方法有：</span><br><span class="line"></span><br><span class="line">void write(int c);     </span><br><span class="line">void write(char[] cbuf);      </span><br><span class="line">void write(char[] cbuf , int off, int len);      </span><br><span class="line">void write(String str);     </span><br><span class="line">void write(String str, int off , int len);     </span><br><span class="line">void flush();     </span><br><span class="line">void close();      </span><br><span class="line"></span><br><span class="line">&gt; 另外，还有 FileReader , 与 FileWriter 比较常用，它们继承自 InputStreamReader 和 OutputStreamWriter（之后会补上，写完这篇文章要去忙学业了。） https://www.runoob.com/java/java-filereader.html    </span><br><span class="line">&gt; https://www.runoob.com/java/java-filewriter.html</span><br><span class="line"></span><br><span class="line">### 1.1 PrintWriter</span><br><span class="line">PrintWriter 是个很实用的东西，它的使用符合 平常的输出。 System.out.println(); 还有 System.out.print();</span><br><span class="line"></span><br><span class="line">它提供 print() 和 println() , 用于写入字符。     </span><br><span class="line">比如</span><br></pre></td></tr></table></figure><p>PrintWriter pwt &#x3D; PrintWriter(new FileWriter(“file.tex“));<br>ptw.println(“ Apple“);<br>ptw.print(“Google“);<br>ptw.print(“|Microsoft“);<br>ptw.close();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">file.txt 文件里的内容就是</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> Apple<br>Google|Microsoft</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 2. 缓冲区读写者 (Buffered)</span><br><span class="line">Reader 和 Writer 也是，如果要读写的内容很多，那么也可以用缓冲区提高效率。也就是 BufferedReader 与 BufferedWriter。用法和 BufferedInputStream ，BufferedOutputStream 类似。</span><br><span class="line"></span><br><span class="line">它们除了从 Reader 和 Writer 继承来的方法，还有 String readLine();  这是 BufferedReader 用来获取整行字符的方法，结束标志位 ‘\n‘ ‘\r‘，没有字符时将返回 null。对应的，BufferWriter 有 void newLine(); 方法，用来在输出流中写入新行。</span><br><span class="line"></span><br><span class="line">BufferReader 可以放在 Reader 后面。       </span><br><span class="line">BufferWriter 可以放在 Writer 后面。      </span><br><span class="line">在关闭（close）时，记得使用 flush(); 清空缓冲区剩余内容。           </span><br><span class="line"></span><br><span class="line">比如：     </span><br></pre></td></tr></table></figure><p>BufferedReader br &#x3D; new BufferedReader(new InputStreamReader(new FileInputStream(“file“)));</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">## 三 文件 (File)</span><br><span class="line">java 提供了 File 类，以便我们更方便的操纵文件，创建文件。      </span><br><span class="line">比如，我可以看文件是否存在，能不能写入，路径是什么，文件大小多大，创建目录 ......</span><br><span class="line"></span><br><span class="line">下面看下构造方法：     </span><br><span class="line">File(String path); 指定路径，创建一个 FIle 实例。     </span><br><span class="line">File(String parent, String child);   根据 parent 和 child 路径创建一个 File。       </span><br><span class="line">File(File dir,String fileName);      根据 File 实列创建一个新的 file。     </span><br><span class="line"></span><br><span class="line">通常还是用第一个构造方法来创建 File。      </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>File file &#x3D; new File(“file.txt“);</p><p>file &#x3D; new File(“.&#x2F;dir&#x2F;file.txt“);</p><p>&#96;&#96;&#96;<br>它还有以下这些常用方法。       </p><h3 id="1-文件名"><a href="#1-文件名" class="headerlink" title="1. 文件名"></a>1. 文件名</h3><p>String getName();     获得文件名。<br>String getPath();      获得文件路径。<br>String getParent();     获得文件父目录。<br>String getAbsolutePath();     获得绝对路径。<br>boolean renameTo(File newName);    改名，成功返回 true，否则 false。</p><h3 id="2-文件测试"><a href="#2-文件测试" class="headerlink" title="2. 文件测试"></a>2. 文件测试</h3><p>boolean exists();   文件是否存在。<br>boolean isFile();   文件对象是否是文件。<br>boolean canWrite();  文件是否可写。<br>boolean canRead();   文件是否可读。<br>bolean isDirector(); 是否是目录。<br>bolean isAbsolute();   是否是绝对路径。     </p><h3 id="3-文件信息"><a href="#3-文件信息" class="headerlink" title="3. 文件信息"></a>3. 文件信息</h3><p>long lastModified();  获取文件三次修改时间戳。<br>long length();   获取文件长度。<br>boolean delete();   删除对象指定的文件，成功返回 true ，失败返回 false。</p><h3 id="4-目录"><a href="#4-目录" class="headerlink" title="4. 目录"></a>4. 目录</h3><p>boolean mkdir();    创建一个新目录。<br>boolean mkdirs();   创建多个层次的新目录。<br>String[] list();    列出目录下的文件名。     </p><h2 id="四-随机访问（RandomAccessFile）"><a href="#四-随机访问（RandomAccessFile）" class="headerlink" title="四 随机访问（RandomAccessFile）"></a>四 随机访问（RandomAccessFile）</h2><p>通过 RandomAccessFile 可以实现各种换不同的位置进行读写。 是在开发中很常用的一个类。      </p><p>可以通过两种方式创建对象。<br>new RandomAccessFile(String path, String mode);<br>new RandomAccessFile(File file, String mode);      </p><p>mode 可以填 “r“ , “w“ , “rw“。分别表示 只读，只写，读写。      </p><p>RandomAccessFile 可以通过指针来决定位置，这就类似于编辑文档时会闪的 “｜”，表示位置。 它可以通过以下几种方法来操作指针。</p><p>long getFilePointer() ; 获取文件指针位置。<br>void seek(long pos);  设置指针位置，0 代表文件的开始。<br>long lenght();    返回文件的长度，在指针上就是 lenght()。     </p><p>移动好指针位置后，就可以使用 write 和 read 来进行操作了。     </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿姆达尔定律 - 计算机加速比</title>
      <link href="/posts/56379.html"/>
      <url>/posts/56379.html</url>
      
        <content type="html"><![CDATA[<h1 id="阿姆达尔定律-计算机加速比"><a href="#阿姆达尔定律-计算机加速比" class="headerlink" title="阿姆达尔定律(计算机加速比)"></a>阿姆达尔定律(计算机加速比)</h1><p>当我们通过改进计算机来对计算机进行加速时，究竟加速了多少？</p><p>我们对计算机的部分硬件进行重量级提升，花费大量资金，但计算机性能并没有显著提升，这是为什么？</p><p>这就是这篇文章要讲的话题，<strong>阿姆达尔定律</strong>。</p><h2 id="阿姆达尔定律的背景"><a href="#阿姆达尔定律的背景" class="headerlink" title="阿姆达尔定律的背景"></a>阿姆达尔定律的背景</h2><p>阿姆达尔定律 由 阿姆达尔在1967年提出。他是IBM360系列机的主要设计者。   </p><p>定理可以确定对系统中性能难以提升的部分改进后的改进程度。   </p><p>整个定律由数学公式计算，具有一定参考价值。从定律中，也可以得到一些对计算机改进方面的结论。</p><p><strong>也许现实中并不好测量然后计算，但它带给我们的结论才是最重要的。</strong></p><h2 id="阿姆达尔定律的推导过程"><a href="#阿姆达尔定律的推导过程" class="headerlink" title="阿姆达尔定律的推导过程"></a>阿姆达尔定律的推导过程</h2><p><strong>提示：如果对推导过程不感兴趣，可以直接看结论。</strong></p><p>第一点，要知道的是。   </p><p><strong><code>加速比 = 系统改进后的性能 / 系统改进前的性能 = 改进前的总执行时间 / 改进后的总执行时间</code></strong>   </p><p>看不懂？ 那就对了，我们继续往下。</p><p>第二点要知道的是：    </p><p><strong><code>改进前￼的总执行时间 = 不可改进部分的执行时间 + 可改进部分的执行时间</code></strong>    </p><p><strong><code>改进后的总执行时间 = (1 - 可改进比例) * 总执行时间 + (可改进比例 * 总执行时间)/部件加速比</code></strong></p><hr><p>首先，我们改进一个机器，通常不是全部改进，而是只改进一部分。所以有了可改进比例 和 不可改进比例。</p><p>那么来看第二条，<br><strong>我们的可改进比例有了，那不可改进比例呢？ 是不是就是 1 - 可改进比例。</strong></p><p>再来看<br><strong>(可改进比例 * 总执行时间) &#x2F; 部件加速比</strong><br>这个 部件加速比 是什么？<br>我们试着去掉它 得到<br> <strong>(可改进比例 * 总执行时间)</strong>   </p><p>一目了然了，去掉后就是 <strong>我们改进前的 可改进部分的总执行时间</strong> 。<br>也就是说 正因为有这个 除以 部件加速比 我们才有了加速后的 <strong>可改进比例的总执行时间</strong>。</p><hr><p>继续看公式<br><strong><code>改进后的总执行时间 = (1 - 可改进比例) * 总执行时间 + (可改进比例 * 总执行时间)/部件加速比</code></strong></p><p>我们可以把 总执行时间 提出来 然后得到    </p><p><strong><code>改进后的总执行时间 = [(1 - 可改进比例)  + (可改进比例)/部件加速比] * 总执行时间</code></strong></p><p>非常好，我们有了 改进前的总执行时间 和 改进后的总执行时间。 看回第一个公式   </p><p><strong><code>加速比 = 系统改进后的性能 / 系统改进前的性能 = 改进前的总执行时间 / 改进后的总执行时间</code></strong>   </p><p>我们将这两个公式 带入第一个公式。</p><p><strong><code>加速比 = 改进前总执行时间 / 改进后总执行时间 = （不可改进部分的执行时间 + 可改进部分的执行时间）/  [(1 - 可改进比例)  + (可改进比例)/部件加速比] * 总执行时间 =  总执行时间 /  [(1 - 可改进比例)  + (可改进比例)/部件加速比] * 总执行时间</code></strong></p><p>得到 </p><p><strong><code>加速比 = 总执行时间 /  [(1 - 可改进比例)  + (可改进比例)/部件加速比] * 总执行时间</code></strong></p><p>上下约分</p><p><strong><code>加速比 = 1 / (1 - 可改进比例)  + (可改进比例)/部件加速比</code></strong></p><p>三条公式合体了，变成了一条非常简洁的公式。 这就是它的推导过程里了 也是我们最终的公式。</p><h2 id="阿姆达尔定律的应用"><a href="#阿姆达尔定律的应用" class="headerlink" title="阿姆达尔定律的应用"></a>阿姆达尔定律的应用</h2><p>如果系统中的一个部件处理速度提高了15倍，该功能处理时间占整个系统的 40% ，那么改后，系统的加速比是多少？</p><p>根据已给信息，我们可以知道部件加速比为15。改进比为40% &#x3D; 0.4。</p><p>将信息带入公式<br> <strong><code>加速比 = 1 / (1 - 可改进比例)  + (可改进比例)/部件加速比</code></strong></p><p>得到</p><p>加速比 &#x3D; 1 &#x2F; ( 1 - 0.4 ) + 0.4 &#x2F; 15 约等于 1.6倍</p><p>假如将部件加速比增加10倍 150</p><p>那么 加速比 &#x3D; 1 &#x2F; ( 1 - 0.4 ) + 0.4 &#x2F; 150 约等于 1.7。<br>仅仅约提高了 ￼￼0.1倍。</p><p>这说明了一个问题，<strong>当提升系统的单个部件即使提升非常大，实际上对整个系统的提升并不大。</strong></p><p><strong>也就是说如果我们要升级一台计算机的性能，我们更应该倾向于整体提升，而不是单个提升。</strong></p><p><del>记得我曾经的一个朋友，花很多钱 上了特别好的的cpu 但整体系统提升没什么明显感觉。只是“跑分”高了。</del></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>当提升系统的单个部件 即使提升非常大，实际上对整个系统的提升并不算大。</li><li>如果我们要升级一台计算机的性能，我们更应该倾向于整体提升，而不是单个提升。</li><li>我们购买电脑时，应注重整体设备部件性能。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机科学 </tag>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/undefined.html"/>
      <url>/posts/undefined.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
