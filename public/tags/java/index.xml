<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on White_cola Blog</title>
    <link>https://itscola.github.io/tags/java/</link>
    <description>Recent content in Java on White_cola Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>我们都渴望的安静，促使我们不再安静。
 Blog Powered by Hugo.</copyright>
    <lastBuildDate>Tue, 26 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://itscola.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java Servlet - All in 01 [编写/填坑中.....]</title>
      <link>https://itscola.github.io/blog/ijava/java-servlet-01/</link>
      <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/ijava/java-servlet-01/</guid>
      <description>Servlet 01 这是后端开发的开始，Servlet API，为什么是 API? 因为它的实现主要在容器中，如 Tomcat Jetty 容器等等。 我们学习 Spring 全家桶，以及各种企业级框架，那么 Servlet 就是学习它们的基础。除了能对 Java Web 后端获得基本的认识之外， 还要知道，Spring MVC 等那些大型框架，也基于 Servlet。
哪一天想自己写个 web 框架，我们也可以基于 Servlet。
零，Web 基础知识 tcp http https web 原理 一，环境部署 在编写 Serlet 之前，我们需要先进行环境部署。
1. 选择容器 我这里使用 Tomcat 作为容器，IDE 选择 Jetbrains Idea。 首先下载 Tomcat 容器。 来官网下载 http://tomcat.apache.org/。
2. 配置 IDE - gradle 2.1 配置 IDE - Maven 二, 小试身手 1. 创建一个 Servlet 2. doGet 与 doPost 3. 访问网站 HelloWord 三, Servlet 基础 1.</description>
    </item>
    
    <item>
      <title>《这就是 Java》第一章 01- 变量</title>
      <link>https://itscola.github.io/blog/javaatoz/java-01/</link>
      <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/javaatoz/java-01/</guid>
      <description>Java 变量 - 这就是 Java 01 (谁知道将来我会不会写书呢 努力吧) 注意，这不是简单点总结概念，那样毫无意义，看起来就像文档，读者也看着不舒服。而是一个从 0 开始的教学系列。 教程和文档不是一个概念。
本教程将采用 非必要，不引入新知识原则。 不会有对新人不友好的术语，也不会时不时引入一个之前没讲过的知识。 力求让 0 基础的读者也能轻松学会。
一. 这就是变量 1. 如何理解变量 想象两个快递盒子，分别装着你买的键盘和鼠标。如果有人问你这两个分别是什么？ 你可以回答 “这个是鼠标，这个是键盘” 。
这时，我们把 装有鼠标的盒子 和 装有键盘的盒子，分别看作一个整体。 如果我们把这两个盒子里的物品互换，鼠标装入原有键盘的盒子，键盘装入原有鼠标的盒子。 那这时，我可以指着原本被指代鼠标的盒子说 “现在这是键盘了”。
是盒子变了吗？并不是，是盒子里的物品变了。
我们可以把 快递盒子看作变量，而 变量表示的值看作快递盒子里装的物品。
比如 ： 变量 box 的值为 10 ，可以想象成 一个被称为 box 的盒子，它里面装的物品为 “10”。 那我们只要一看到 box 就可以将它可以指代为 “10”了。
那如果我把 box 的值变为了 11，那是不是就类似于 我把盒子 “box” 里面的物品换成 “11”了？ 是的，变量就那么简单。
2. 变量的概念 那么，变量是用一个 “盒子”来表示“盒子所装的物品”。并且，“盒子”所表示的里面的“物品”是可以变成其它“物品”的。
我们把“盒子”的名字，称为 变量名。 我们把“盒子”所代表的“物品”，称为 变量值。</description>
    </item>
    
    <item>
      <title>Java 多线程 - 多线程基本概念 线程状态 线程调度 线程互斥 线程同步..（一）</title>
      <link>https://itscola.github.io/blog/ijava/java-mutiple-threads-i/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/ijava/java-mutiple-threads-i/</guid>
      <description>Java 多线程 - 多线程的必备概念（一） 这篇文章，可以根据自己的情况来学习，如果你忙于考试等，可以重视一些概念。如果你忙于入门或巩固，可以不那么重视那些概念。
这边的文章结构我会参考一些书的目录，但内容是不同的。我会用我的话，让你更容易理解的解释出来。如果非要说，你也可以把它理解成一份笔记，但是这篇笔记对其他人也适用。 
一，何为线程 1. 线程的特征 线程类似于进程，而又不同于进程。有了多线程，可以异步执行代码，不再受到前面代码没执行完后面就不能执行的问题，这大大提高了效率。 但同时，使用多线程也要重视着线程安全问题。
2. 线程的概念 线程是执行过程中 进程 产生的动态的 代码片段执行者，对于一个进程中的不同线程，可以同时间段执行不同的代码片段，它们之间通常不会互相影响执行进度。因为多个线程共享同一个进程的资源，不同线程才可能会同时访问同一个字段，这属于线程安全问题。
（这里的“代码片段”指的是一段代码，包含一段代码调用的其它片段代码）。
 多个线程，运行在同一个进程当中，由进程触发，共享进程的系统资源。多进程之间是不会共享资源多。 线程之间的切换快于进程。（放到后面讲）
  通常情况下，我们的代码只能上一行走完走下一行。不仅效率低，即使我们的 CPU 有很多个核心，也很可能是一核有难，多核围观。 这时候线程派上用场了，他可以 同 时 间段执行多个代码片段，并且多个线程共享一个程序中的 字段。大大提升效率，并且充分利用 CPU 多核性能。（这并不代表单核 CPU 不兼容多线程代码）
 3. 为什么多线程如此重要 假如我们的程序正常运行时，要进行读写本地的文件数据。但是如果文件很大，读写了很久，那我们的其它代码就别想运行了，直接卡住。 而有了多线程，我们可以一边读写，一边在正常运行程序的代码。
java 提供了 Thread 类来实现多线程运行。
 这边聊下 python，据我了解 目前为止。python 的多线程不是在一个进程下的。而是在进程的多线程下，也就是说，它的多线程是套在多线程下的。
 二，线程组成 1. 代码  代码：要运行的代码片段，传入 Thread 类后，顺序执行。   后面我们会介绍几种创建方法。
 // 下方为象征代码，并不是精准这样写，为了更好的向你解释。 new Thread(new Runnable(){ run(){ run方法 （象征） 代码片段 } }); 当然，我们可以用上 新版本 java 的 lambda 表达式。</description>
    </item>
    
    <item>
      <title>Java GUI 开发 - 简单基本组件，事件处理，事件分类，事件适配器 (二)</title>
      <link>https://itscola.github.io/blog/javaui/java-ui-develope-2/</link>
      <pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/javaui/java-ui-develope-2/</guid>
      <description>Java UI开发 - 2 此教程紧接着第一篇内容来 第一篇： https://www.whitecola.top/blog/javaui/java-ui-develope-1/
上一篇我们讲了 容器 顶级容器 内容窗格 面板 以及 布局，这次我们来讲讲基本的组件，按钮，文本框等等。
点击按钮是要有反应的，这个反应就是我们要讲的 “事件” 来控制。也在本篇文章中这是重点。
Java 自带的 awt，swing 组件太丑？ 推荐给你这个： https://github.com/atarw/material-ui-swing 但是没有基础也会用起来很吃力，等看完文章再上手吧。
当然，还会有第三篇文章 swing 组件， 和第四篇 绘图，第五篇第六盘 JavaFX。 实际上，如果你想实现基本掌握 UI 开发，那看上一篇和这一篇就差不多够了，后面的可以说是扩展。
很多地方都是通的。比如你理解了 JLabel ， JButton，换一个库，也能快速上手。
一，简单基本组件 1. JLabel 标签 当我们要在 UI 中显示文字 图标，又或是图标和文字时，我们就要用到 JLabel 标签。它是不可编辑的，也就是说它仅仅是显示信息给使用者。
我们来看如何创建，也就是来看它的构造方法。
 JLabel() - 创建一个空的标签 JLabel(Icon image) - 创建一个图标标签 JLabel(String text) - 创建一个文本标签 JLabel(Icon image,int horizontalAlignment) - 创建一个图标标签，并指定水平对齐方式 JLabel(String text,int horizontalAlignment) - 创建一个文本标签，并指定水平对齐方式 JLabel(String text,Icon image,int horizontalAlignment) - 创建一个图标标签，并指定水平对齐方式  其中对其参数可以为 JLabel.</description>
    </item>
    
    <item>
      <title>Java GUI 开发 - 容器,内容窗格,面板,布局管理器 (一)</title>
      <link>https://itscola.github.io/blog/javaui/java-ui-develope-1/</link>
      <pubDate>Thu, 12 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/javaui/java-ui-develope-1/</guid>
      <description>Java UI开发 - 1 Java 的 UI 开发目前已经不好学到了，原因是不经常用。 企业开发中，很少人会选择用 Java 开发有 UI 的桌面程序。教程中也很难找到了。
即使这样，学习一下还是很有必要的，万一需要使用，不至于不会用。
另一种情况，我们可以通过这个技术衍生出类似技术的 思考能力。或许在以后用其它语言写桌面程序时，已经有了实现思路。
其实目前有很多桌面程序也是 java 写得，比如 java 开发者基本都熟悉的 JetBrain Idea 以及 JetBrain 的其它产品，它是由 java swing 写的（没错，不是 javafx ）。 再比如 ArcTime ， HMCL 等等。
作为 “跨平台掌门人” Java ， 跨平台在这方面也是少不了的。 这是这个教程系列的第一篇文章，我会用最通俗的语言，让你学会的。
文章已在 2021 年 8月12日 补充 “面板”。 第一次发布时间在 2021 年 7 月 3 日。
1. AWT 与 Swing Java 的 GUI 由各种组件构成，它们在 java.awt 与 javax.swing 包中。
AWT 组件在 java.</description>
    </item>
    
    <item>
      <title>Java IO 基础知识 - 温故而知新</title>
      <link>https://itscola.github.io/blog/ijava/java-io/</link>
      <pubDate>Fri, 23 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/ijava/java-io/</guid>
      <description>Java IO 基础知识 在这里我们会讲解一些必备的基础知识，以便使用。会把最实用的内容挑出来，方便理解。如果想看 Java I/O 的所有知识，网上的文章已经很多了。 这篇文章追求的是简单易懂。
注意，看之前，强烈建议先理解，装饰设计模式。它能让你懂得 缓冲流 转换流 的实现原理。
一 数据流的概念 输入文字，读取文件数据，向文件写入数据。这些 输入/输出 源头（数据）在java中都称为流。输入和输出的数据就被称为数据流，它是有顺序的一组 byte 集合。
输入输出 的方式有 输入流，输出流。 输入流只能输入，输出流只能输出。读取数据时，将数据源要与数据流连接。(后面会讲。)
 可以把流想象成一堆液体，液体里就是我们要的数据。如果我们要运输液体，那我们必须要弄“管道”用于传输液体。管道的不同，会有不同到特性。（这个比喻不恰当的地方在于，用管道运输流时，流是有顺序的进入。但这个比喻更容易理解。）
 java 的流操作在 java.io 包中，java.io 中分为两类流，字节流和字符流。JDK 字符流的加入晚于字节流，用于更好的处理字符。提供了一些字符操作的参数等。
 (根据运输“管道”的不通，可以分出 字节流 和 字符流。它们的运输方式不一样。)
 1. 输入数据流 (InputStream) 输入数据流为只能读取，不能写入的数据流。
所有字节流中的输入数据流，都继承自InputStream 抽象类，实现了它的方法，字段。 
它有几个常用方法： int read(); 从输入流读取一个字节的数据。 int read(byte[] b); 读取 b.lenght 个字节，并放入数组中。 int read(byte[] b, int off, int len); 读取 len 个字节，并放入 b ，从数组下标 off 开始。</description>
    </item>
    
    <item>
      <title>Projector 搭建个网页版的 Idea 随时随地 Java 开发？</title>
      <link>https://itscola.github.io/blog/ijava/projector-idea-ide/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/ijava/projector-idea-ide/</guid>
      <description>一 要是能随时随地写代码就好了 12.9 寸的 iPad Pro 加上妙控键盘，再来一个蓝牙鼠标，确实很香，携带型没得说。
但是由于是 iPadOS 而非 Macos，在程序开发上，是它的非常大的短板。
App store 也不允许上架能创造软件的开发工具（为了让用户只从 App store 下载 app，以此来达到安全性）。因此用 app 做开发，非常难。
想象随时随地，拿出 iPad，直接写代码，那该多快乐啊。
二 Jetbrains Projector https://lp.jetbrains.com/projector 还好，Jebrains 提供了 Projector 产品，供我们进行在线开发。也就是说，我们随时随地进入网站，使用 Jetbrains Idea。
简单来说，它会把本地的 idea 的 Swing ui，渲染到一个网站上，然后通过网站，控制电脑上的 idea 。
这看似和远程操作很像，但不一样的是这是在一个网站上，而且 操作界面 变成了网站的一部分。
这样以来，任何设备只要打开浏览器，输入网址，打开网站（当然还要输入密码），就能继续写代码。
1. 为什么不直接远程 ？ 在外面一般用流量，消耗流量多不说，时不时也达不到完美的流畅度，会有一定的延迟。
Teamviewer 等远程软件，在外面连家里会有很大的延迟，而且连接端必须有下载软件。
云电脑通常又比较贵，而且数据必须在云电脑那边。免费的又必须不停重新安装。
自己用程序搭建的话，没有公网 ip 情况，用 frp，ngrok 等，对网络有一定要求。不是自己搭建的内网穿透的话，更不用说了。
直接在浏览器使用 idea，便捷性大大提高。
还有一点就是，iPad 连 teamviwer 远程写代码，体验很不好，容易误操作。
当然，假如你那边没有以上问题，或者能接受，直接远程肯定是更舒服。具体要看情况。但大部分不会做到太好。
三 环境部署 我这里直接用最简单的方法了，直接在 Idea 中安装 Projector 的插件。 这篇文章也不是教程，而是告诉你一个解决方案，如何去实现。</description>
    </item>
    
    <item>
      <title>什么是编译器,解释器? (一文理解编译型和解释型语言)</title>
      <link>https://itscola.github.io/blog/compiler-and-interpreter/</link>
      <pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/compiler-and-interpreter/</guid>
      <description>编程语言  我们所用的程序都是用某种语言写的, 但是它会先被翻译成能被计算机执行的语言之后才能运行. 通常人们会通过它用了 编译器(compiler) 还是 解释器(interpreter) 来判定他解释型还是编译型语言. 如java这种又用了 编译器 又用了 解释器 通常被我们称为 半解释半编译型语言.  编译器和解释器 编译器 编译器就是一个程序.它会把我们的 源代码写的程序 翻译成 一种等价的 另一种语言 写的程序.
在它进行翻译的过程中, 还会报告它在源代码中发现的错误.
 源代码写的程序 -编译器-&amp;gt; 目标程序
目标程序就可以处理 用户的输入 得到对应的 输出  解释器 解释器不会进行翻译来生成目标程序, 而是直接通过 用户的输入 和 源程序 来生成目标程序.
 源代码写的程序 + 用户的输入 -解释器-&amp;gt; 目标程序  优缺点  通过编译器生成的目标程序 来处理用户的输入 通常比用一个解释器快很多. 通过解释器来运行 由于它是逐个语句来执行 错误诊断效果通常比编译器好.  Java的半编译半解释 Java就是个半编译半解释形语言 java源程序会被编译成字节码(bytecode)(中间代码),然后再由JVM(java虚拟机) 解释执行. 也通过中间代码 实现了跨平台.
补充 在编译器和解释器前后, 还会有一些其他步骤. 这边主要聊编译器和解释器.</description>
    </item>
    
    <item>
      <title>Gradle快速掌握基础用法</title>
      <link>https://itscola.github.io/blog/gradle-basic/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/gradle-basic/</guid>
      <description>Why Gradle？  Gradle是一款自动化构建项目的开源工具。 它使用Groovy来声明项目设置。和maven相比，它抛弃了繁杂的xml配置，同时配置文件做到简洁美观。 很多开源项目 需要使用gradle构建。 Java应用为主 目前支持 Java、Groovy、Kotlin和Scala.  下载并配置 下载地址： 点击下载 这里下载all版本，包含了源码、文档、示例等内容。
配置环境变量：  将压缩包解压到任意目录. 打开环境变量配置，添加系统变量到这个目录，命名为Gradle_Home。 选择用户变量中的path，添加%Gradle_Home%/bin 。 在cmd中输入 gradle -v 如果出现显示的gradle版本，代表配置成功。  使用本地maven仓库 如果每个项目都要从maven仓库下载一次依赖, 那么将会占用很多空间, 并影响开发效率. 我们可以通过配置环境变量, 先让gradle找本地下载过的依赖, 如果没有 那再去maven仓库下载.
首先选择一个本地的maven仓库文件夹路径. 然后打开环境变量配置, 在系统变量新建一个变量 变量名为 GRADLE_USER_HOME 变量值为上一步选择的本地 maven仓库文件夹.
今后gradle会先从本地maven仓库找jar包 , 找不到再去maven仓库下载到本地maven仓库.
IDEA创建gradle项目与配置 在Idea中创建Gradle项目 配置build.gradle  主要配置内容:
   repositories主要是选定的maven仓库 默认为maven中央仓库
当然你也可以添加仓库 可以参考 阿里的Maven仓库镜像 的教程来设定  在denpdencies添加jar坐标(依赖):   从你所添加的maven仓库添加:
这里用默认的 maven中央仓库. 首先打开你所要添加的仓库页面, 搜索你要添加的jar. 点击search. 找到后点击.</description>
    </item>
    
  </channel>
</rss>
