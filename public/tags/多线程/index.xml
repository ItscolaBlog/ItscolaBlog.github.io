<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多线程 on White_cola Blog</title>
    <link>https://itscola.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
    <description>Recent content in 多线程 on White_cola Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>我们都渴望的安静，促使我们不再安静。
 Blog Powered by Hugo.</copyright>
    <lastBuildDate>Tue, 17 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://itscola.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 多线程 - 多线程基本概念 线程状态 线程调度 线程互斥 线程同步..（一）</title>
      <link>https://itscola.github.io/blog/ijava/java-mutiple-threads-i/</link>
      <pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://itscola.github.io/blog/ijava/java-mutiple-threads-i/</guid>
      <description>Java 多线程 - 多线程的必备概念（一） 这篇文章，可以根据自己的情况来学习，如果你忙于考试等，可以重视一些概念。如果你忙于入门或巩固，可以不那么重视那些概念。
这边的文章结构我会参考一些书的目录，但内容是不同的。我会用我的话，让你更容易理解的解释出来。如果非要说，你也可以把它理解成一份笔记，但是这篇笔记对其他人也适用。 
一，何为线程 1. 线程的特征 线程类似于进程，而又不同于进程。有了多线程，可以异步执行代码，不再受到前面代码没执行完后面就不能执行的问题，这大大提高了效率。 但同时，使用多线程也要重视着线程安全问题。
2. 线程的概念 线程是执行过程中 进程 产生的动态的 代码片段执行者，对于一个进程中的不同线程，可以同时间段执行不同的代码片段，它们之间通常不会互相影响执行进度。因为多个线程共享同一个进程的资源，不同线程才可能会同时访问同一个字段，这属于线程安全问题。
（这里的“代码片段”指的是一段代码，包含一段代码调用的其它片段代码）。
 多个线程，运行在同一个进程当中，由进程触发，共享进程的系统资源。多进程之间是不会共享资源多。 线程之间的切换快于进程。（放到后面讲）
  通常情况下，我们的代码只能上一行走完走下一行。不仅效率低，即使我们的 CPU 有很多个核心，也很可能是一核有难，多核围观。 这时候线程派上用场了，他可以 同 时 间段执行多个代码片段，并且多个线程共享一个程序中的 字段。大大提升效率，并且充分利用 CPU 多核性能。（这并不代表单核 CPU 不兼容多线程代码）
 3. 为什么多线程如此重要 假如我们的程序正常运行时，要进行读写本地的文件数据。但是如果文件很大，读写了很久，那我们的其它代码就别想运行了，直接卡住。 而有了多线程，我们可以一边读写，一边在正常运行程序的代码。
java 提供了 Thread 类来实现多线程运行。
 这边聊下 python，据我了解 目前为止。python 的多线程不是在一个进程下的。而是在进程的多线程下，也就是说，它的多线程是套在多线程下的。
 二，线程组成 1. 代码  代码：要运行的代码片段，传入 Thread 类后，顺序执行。   后面我们会介绍几种创建方法。
 // 下方为象征代码，并不是精准这样写，为了更好的向你解释。 new Thread(new Runnable(){ run(){ run方法 （象征） 代码片段 } }); 当然，我们可以用上 新版本 java 的 lambda 表达式。</description>
    </item>
    
  </channel>
</rss>
